@page "/produtos"

@inject NavigationManager NavigationManager
@inject IViewProdutos ViewProdutos
@inject IGetCategoryById GetCategoryById
@inject IDeleteProduto DeleteProduto

<h3>Produtos</h3>
<br />
@if (produtos != null)
 {
     <table class="table table-bordered">
         <thead>
             <tr>
                 <th>Categoria</th>
                 <th>Nome</th>
                 <th>Quantidade</th>
                 <th>Preço</th>
                 <th></th>
             </tr>
         </thead>
         <tbody>
             @foreach (var product in produtos)
             {
                 <tr>
                     <td>@GetCategoryById.Execute(product.CategoryId.Value)?.Name</td>
                     <td>@product.Name</td>
                     <td>@product.Quantidade</td>
                     <td>@(Math.Round(product.Preco.Value, 2))</td>
                     <td>
                         <button type="button" class="btn btn-light" @onclick="@(() => OnEditProduto(product))"><span class="oi oi-pencil"></span></button>
                         <button type="button" class="btn btn-dark" @onclick="@(() => OnDeleteProduto(product.ProdutoId))"><span class="oi oi-trash"></span></button>
                     </td>
                 </tr>
             }
         </tbody>
     </table>
 }
<br />
<button type="button" class="btn btn-primary" @onclick="OnClickAddProduto">Novo Produto</button>

@code {

    private IEnumerable<CoreBusiness.Produto> produtos;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        produtos = ViewProdutos.Execute();
    }

    private void OnClickAddProduto()
    {
        NavigationManager.NavigateTo("/NovoProduto");
    }

    private void OnEditProduto(Produto produto)
    {
        NavigationManager.NavigateTo($"/editarproduto/{produto.ProdutoId}");
    }

    private void OnDeleteProduto(int produtoId)
    {
        DeleteProduto.Execute(produtoId);
    }
}
