@page "/produtos/NovoProduto"
@using System.Drawing
@using System.IO
@using CoreBusiness.Enum
@attribute [Authorize(Policy = "Admin")]

@inject NavigationManager NavigationManager
@inject IAddProduto IAddProduto
@inject IAddImagem IAddImagem
@inject IGetCategoryById GetCategoryById
@inject IViewCategoriesUseCase ViewCategories
@inject IToastService toastService


<h3>Novo Produto</h3>
<br />
@if (produto != null)
{
    <EditForm Model="produto" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label for="name">Nome</label>
                    <InputText id="name" @bind-Value="produto.Name" class="form-control"></InputText>
                </div>

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="category">Categoria</label>
                            <select id="category" @bind="produto.CategoryId" class="form-control">
                                <option selected></option>
                                @foreach (var cat in categories)
                                {
                                    <option value="@cat.CategoryId">@cat.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="quantidade">Quantidade</label>
                            <InputNumber id="quantidade" @bind-Value="produto.Quantidade" class="form-control"></InputNumber>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="preco">Preço</label>
                    <InputNumber id="preco" @bind-Value="produto.Preco" @bind-Value:format="F2" class="form-control"></InputNumber>
                </div>

                <div class="form-group">
                    <label for="descricao">Descrição</label>
                    <InputTextArea id="descricao" @bind-Value="produto.Descricao" class="form-control" rows="8"></InputTextArea>
                </div>

                <div class="form-group">
                    <label for="destaque">Mostrar em Destaque ?</label>
                    <InputCheckbox id="destaque" @bind-Value="produto.Destaque"></InputCheckbox>
                </div>
            </div>
            <div class="col-sm-6">
                <label for="foto">Fotos do Produto</label>

                <div id="gridImagens" class="mb-3 custom-scroll">
                    @foreach (var img in imagens.Select((value, index) => new { value, index }))
                    {
                        <div id="divImagens">
                            <a style="letter-spacing:0rem;" class="btn-remove-img text-dark" @onclick="@(() => RemoveImagem(img.index))" title="Excluir Imagem">
                                <span class="fa fa-times"></span>
                            </a>
                            <img class="imagensProduto" src="@img.value.ImageUrl" multiple />
                        </div>
                    }
                    @if (imagens.Count < 12)
                    {
                        <div class="card custom-file text-center">
                            <InputFile id="imagens" OnChange="@OnInputFileChanged" multiple class="custom-file-input" accept="image/png, image/jpeg"></InputFile>
                            <div class="card-body">
                                <i class="fa fa-plus fa-3x" aria-hidden="true"></i>
                                <div class="card-footer card-footer-imgs">Adicionar Imagem</div>
                            </div>
                        </div>
                    }
                </div>
                <div style="display: grid;">
                    <label class="mb-0">- Selecione imagens de no máximo 2.5MB</label>
                    <label class="mb-0">- Selecione no máximo 12 imagens</label>
                </div>
                @*<div class="form-group">
            <InputFile id="imagens" OnChange="@OnInputFileChanged" multiple class="form-control" accept="image/png, image/jpeg"></InputFile>
            </div>*@
            </div>
        </div>
        <div class="button-align-2">
            <button type="submit" class="btn bg-gradient-info">Adicionar</button>
            <button type="button" class="btn bg-gradient-danger" @onclick="OnCancel">Cancelar</button>
        </div>
    </EditForm>

}

@code {

    private Produto produto;
    private ImagensProdutos imagem;
    private List<ImagensProdutos> imagens;
    private Image img;
    private IEnumerable<Category> categories;
    private ToastParameters _toastParameters, _toastParametersError, _toastParametersError2, _toastParametersError3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        imagens = new List<ImagensProdutos>();
        imagem = new ImagensProdutos();
        produto = new Produto();
        categories = ViewCategories.Execute();
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        var maxFilesError = false;
        if (inputFileChangeEventArgs.GetMultipleFiles(20).Count > 8)
            maxFilesError = true;
        try
        {
            var fileFormat = "image/png";
            var imageFile = inputFileChangeEventArgs.GetMultipleFiles(12);

            foreach (var image in imageFile)
            {
                var resizedImageFile = await image.RequestImageFileAsync(fileFormat, 100, 100);
                var buffer = new byte[image.Size];
                await image.OpenReadStream(2500000).ReadAsync(buffer);

                imagem = new ImagensProdutos
                    {
                        ImageUrl = $"data:{fileFormat};base64,{Convert.ToBase64String(buffer)}",
                        Imagem = buffer
                    };

                imagens.Add(imagem);
            }
        }
        catch
        {
            if (!maxFilesError)
            {
                _toastParametersError = new ToastParameters();
                _toastParametersError.Add(nameof(MyToastComponent.Message), "Não é possivel carregar imagens de tamanho superior a 2.5MB!");
                _toastParametersError.Add(nameof(MyToastComponent.Type), EnumTipoToast.Error);

                toastService.ShowToast<MyToastComponent>(_toastParametersError, new ToastInstanceSettings(6, true));
            }
            else
            {
                _toastParametersError2 = new ToastParameters();
                _toastParametersError2.Add(nameof(MyToastComponent.Message), "Selecione no máximo 8 imagens.");
                _toastParametersError2.Add(nameof(MyToastComponent.Type), EnumTipoToast.Error);

                toastService.ShowToast<MyToastComponent>(_toastParametersError2, new ToastInstanceSettings(6, true));
            }
        }
    }

    protected void RemoveImagem(int imgIndex)
    {
        imagens.RemoveAt(imgIndex);
    }

    private void OnValidSubmit()
    {
        try
        {
            IAddProduto.Execute(produto);
            IAddImagem.Execute(produto, imagens);
            NavigationManager.NavigateTo("/produtos/1");

            _toastParameters = new ToastParameters();
            _toastParameters.Add(nameof(MyToastComponent.Message), "Produto Adicionado Com Sucesso!!");
            _toastParameters.Add(nameof(MyToastComponent.Type), EnumTipoToast.Sucesso);

            toastService.ShowToast<MyToastComponent>(_toastParameters, new ToastInstanceSettings(6, true));
        }
        catch (Exception ex)
        {
            _toastParametersError3 = new ToastParameters();
            _toastParametersError3.Add(nameof(MyToastComponent.Message), "Erro ao Salvar o Produto! \n\n" + ex);
            _toastParametersError3.Add(nameof(MyToastComponent.Type), EnumTipoToast.Error);

            toastService.ShowToast<MyToastComponent>(_toastParametersError3, new ToastInstanceSettings(6, true));
        }
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/produtos/1");
    }
}