@page "/logos-banners"
@using CoreBusiness.Enum
@using Library.UseCaseInterfaces.IBanners
@attribute [Authorize(Policy = "Admin")]

@inject NavigationManager NavigationManager
@inject IGetBanners GetBanners
@inject IViewBanners ViewBanners
@inject IAddOrRemoveBanners Banners
@inject IToastService toastService

<h3>Logos e Banners</h3>
<br />


<EditForm Model="carrosselBanners" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="col-sm-12">
        <label for="banners">Banners</label>
        <div id="gridBanners" class="form-group custom-scroll">
            @foreach (var img in carrosselBanners.Select((value, index) => new { value, index }))
            {
                <div class="card">
                    <div class="card-body" style="padding:0;">
                        <a style="letter-spacing:0rem;" class="btn-remove-img text-dark" @onclick="@(() => RemoveBanner(img.index))" title="Excluir Banner">
                            <span class="fa fa-times"></span>
                        </a>
                        <img class="imgsBanner" src="@img.value.BannerUrl" multiple />
                    </div>
                </div>
            }

            @if (carrosselBanners.Count < 8)
            {
                <div class="card custom-file text-center">
                    <InputFile id="banners" class="custom-file-input" OnChange="@OnInputFileChanged" multiple accept="image/png, image/jpeg"></InputFile>
                    <div class="card-body">
                        <i class="fa fa-plus fa-3x" aria-hidden="true"></i>
                        <div class="card-footer">Adicionar Banner</div>
                    </div>
                </div>
            }
        </div>
    </div>
    <button type="submit" class="btn bg-gradient-info">Salvar</button>
</EditForm>

@code {
    private Banners banners;
    private List<Banners> carrosselBanners;
    private ToastParameters _toastParameters, _toastParametersError, _toastParametersError2, _toastParametersError3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }


    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        var maxFilesError = false;
        if (inputFileChangeEventArgs.GetMultipleFiles(20).Count > 8)
            maxFilesError = true;
        try
        {
            var fileFormat = "image/png";
            var bannerFile = inputFileChangeEventArgs.GetMultipleFiles();

            foreach (var baner in bannerFile)
            {
                var resizedImageFile = await baner.RequestImageFileAsync(fileFormat, 100, 100);
                var buffer = new byte[baner.Size];
                await baner.OpenReadStream(2500000).ReadAsync(buffer);

                banners = new Banners
                    {
                        DataCadastro = new DateTime(),
                        BannerUrl = $"data:{fileFormat};base64,{Convert.ToBase64String(buffer)}",
                        Banner = buffer
                    };
                carrosselBanners.Add(banners);
            }
        }
        catch
        {
            if (!maxFilesError)
            {
                _toastParametersError2 = new ToastParameters();
                _toastParametersError2.Add(nameof(MyToastComponent.Message), "Não é possivel carregar imagens de tamanho superior a 2.5MB!");
                _toastParametersError2.Add(nameof(MyToastComponent.Type), EnumTipoToast.Error);

                toastService.ShowToast<MyToastComponent>(_toastParametersError2, new ToastInstanceSettings(6, true));
            }
            else
            {
                _toastParametersError3 = new ToastParameters();
                _toastParametersError3.Add(nameof(MyToastComponent.Message), "Selecione no máximo 8 imagens.");
                _toastParametersError3.Add(nameof(MyToastComponent.Type), EnumTipoToast.Error);

                toastService.ShowToast<MyToastComponent>(_toastParametersError3, new ToastInstanceSettings(6, true));
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        carrosselBanners = GetBanners?.Execute();

    }

    protected void RemoveBanner(int bnrIndex)
    {
        carrosselBanners.RemoveAt(bnrIndex);
    }

    private void OnValidSubmit()
    {
        try
        {
            Banners.Execute(carrosselBanners);

            _toastParameters = new ToastParameters();
            _toastParameters.Add(nameof(MyToastComponent.Message), "Banner(s) Salvo(s) Com Sucesso!!");
            _toastParameters.Add(nameof(MyToastComponent.Type), EnumTipoToast.Sucesso);

            toastService.ShowToast<MyToastComponent>(_toastParameters, new ToastInstanceSettings(6, true));

        }
        catch (Exception ex)
        {
            _toastParametersError = new ToastParameters();
            _toastParametersError.Add(nameof(MyToastComponent.Message), "Erro ao Salvar Banner(s)! \n" + ex);
            _toastParametersError.Add(nameof(MyToastComponent.Type), EnumTipoToast.Error);

            toastService.ShowToast<MyToastComponent>(_toastParametersError, new ToastInstanceSettings(6, true));
        }
    }
}
