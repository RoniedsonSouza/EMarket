@page "/categorias/{PageNumber:int}"
@attribute [Authorize(Policy = "Admin")]

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IViewCategoriesUseCase ViewCategoryUseCase
@inject IDeleteCategory IDeleteCategory
@inject IGetCategories GetCategories

<h3>Categorias</h3>
<br />
@if (categories != null)
{
    <table id="categorias" class="table table-bordered">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Descrição</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button type="button" class="btn btn-link text-danger px-3 mb-0" @onclick="@(() => DeleteCategory(category.CategoryId, category.Name))">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                            Excluir
                        </button>
                        <button type="button" class="btn btn-link text-dark px-3 mb-0" @onclick="@(() => EditCategory(category))">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                            Editar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    if (paginas > 7)
    {
        <div>
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center">
                    @for (int i = 1; i <= maximoPaginas; i++)
                    {
                        @if (i == PageNumber)
                        {
                            <li class="page-item disabled"><a class="page-link" href="categorias/@i">@i</a></li>
                        }
                        else if (i != PageNumber)
                        {
                            <li class="page-item"><a class="page-link" href="categorias/@i">@i</a></li>
                        }
                    }
                </ul>
            </nav>
        </div>
    }
}
<br />
<button type="button" class="btn bg-gradient-info button-align" @onclick="OnClickAddCategory">Nova Categoria</button>
<br />

@code {
    [Parameter]
    public int PageNumber { get; set; }

    private IPagedList<Category> categories;
    public decimal paginas { get; set; }
    public int maximoPaginas { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCategories(PageNumber);

        paginas = GetCategories.ExecuteResult().Count();
        maximoPaginas = (int)Math.Ceiling(paginas / 7);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PageNumber < 1) PageNumber = 1;

        categories = GetCategories.Execute(PageNumber, 7);
        paginas = GetCategories.ExecuteResult().Count();
        maximoPaginas = (int)Math.Ceiling(paginas / 7);
    }

    private void OnClickAddCategory()
    {
        NavigationManager.NavigateTo("/NovaCategoria");
    }

    private void EditCategory(Category category)
    {
        NavigationManager.NavigateTo($"/editarcategoria/{category.CategoryId}");
    }

    private async Task DeleteCategory(int categoryId, string nome)
    {
        //PopUp
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir a categoria " + nome + "?");
        if (confirmed)
        {
            IDeleteCategory.Delete(categoryId);
            LoadCategories(PageNumber);
        }

    }

    private void LoadCategories(int page)
    {
        categories = GetCategories.Execute(page, 7);
    }
}
